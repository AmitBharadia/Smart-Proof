package com.kit.verifier.zeroknowledge.components;

import com.kit.verifier.zeroknowledge.TTPGenerator;
import com.kit.verifier.zeroknowledge.dto.ECProof;
import com.kit.verifier.zeroknowledge.dto.SquareProof;

import java.math.BigInteger;
import java.security.SecureRandom;

/**
 * Implementation of 'Proof that a Committed Number is a Square'
 *
 * This protocol is described in section 2.3 in the following paper:
 * Fabrice Boudot, Efficient Proofs that a Committed Number Lies in an Interval
 */
public class HPAKESquare {

    public static SquareProof calculateZeroKnowledgeProof(
            BigInteger b,  // maximum committed value to be hidden (square root)
            BigInteger N,  // large composite number whose factorization is unknown by Alice and Bob
            BigInteger g,  // element of large order in Zn*
            BigInteger h,  // element of group generated by g such that both the discrete log of g
                           //   in base h and vice versa are unknown by Alice
            BigInteger x,  // the square root of the committed number
            BigInteger r1, // random value used in the existing commitment E = g^(x^2) h^r1
            SecureRandom random) {

        BigInteger r2 = TTPGenerator.generateKey(N, random);
        BigInteger r3 = r1.subtract(r2.multiply(x)); // r1 - r2 * x

        BigInteger F = g.modPow(x, N).multiply(h.modPow(r2, N)).mod(N); // F = g^x*h^r2

        // Now we show that E = F^x h^r3 hides the same number as F = g^x h^r2
        // From this it follows that E = g^x2 h^r1 hides the square of x:
        // E = F^x h^r3 = (g^x h^r2)^x h^r3 = g^x2 h^(r2*x +r3) = g^x2 h^(r2*x + r1 - r2*x) = g^x2 h^r1

        ECProof ecProof = HPAKEEqualityConstraint.calculateZeroKnowledgeProof(b, N, g, F, h, h, x, r2, r3, random);
        return new SquareProof(F, ecProof);
    }

    public static void validateZeroKnowledgeProof(BigInteger N, BigInteger g, BigInteger h, BigInteger E, SquareProof proof) {
        BigInteger F = proof.getF();
        HPAKEEqualityConstraint.validateZeroKnowledgeProof(N, g, F, h, h, F, E, proof.getECProof());
    }
}
